{"version":3,"sources":["Components/Square.js","Components/BattleBoard.js","Components/Modal.js","Components/InfoPanel.js","Components/Game.js","helper.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","className","BattleBoard","squares","map","square","i","Modal","active","setActive","setNames","validationSchema","Yup","firstName","required","min","max","secondName","formik","useFormik","initialValues","onSubmit","values","handleSubmit","htmlFor","id","name","type","onChange","handleChange","touched","errors","InfoPanel","names","score","gameOver","index","Game","useState","modalActive","setModalActive","setScore","Array","fill","board","setBoard","xIsNext","setXIsNext","winner","patterns","length","a","b","c","culcWinner","newGame","newScore","newBord","every","e","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9405c5.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\n\r\nexport default function Square({ value, onClick }) {\r\n    return (\r\n        <div >\r\n            <button className=\"square\" onClick={onClick}>{value}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../App.css';\r\nimport Square from './Square';\r\n\r\n\r\nexport default function BattleBoard({ squares, onClick }) {\r\n    return (\r\n        <div className='battle-board'>\r\n            {squares.map((square, i) =>\r\n                <Square key={i} value={square} onClick={() => onClick(i)} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from \"yup\"\r\n\r\nexport default function Modal({ active, setActive, setNames }) {\r\n\r\n    const initialValues = {\r\n        firstName: '',\r\n        secondName: ''\r\n    }\r\n\r\n    const onSubmit = values => {\r\n        setNames([values.firstName, values.secondName])\r\n        setActive(false)\r\n    }\r\n    const validationSchema = Yup.object({\r\n        firstName: Yup\r\n            .string()\r\n            .required('Required')\r\n            .min(2, 'At least 2 symbols')\r\n            .max(20, 'Max. 20 symbols'),\r\n        secondName: Yup\r\n            .string()\r\n            .required('Required')\r\n            .required('Required')\r\n            .min(2, 'At least 2 symbols')\r\n            .max(20, 'Max. 20 symbols'),\r\n    })\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n    return (\r\n        <div className={active ? 'modal' : 'modal deactive'}>\r\n            <form className=\"modal-form\" onSubmit={formik.handleSubmit}>\r\n                <label htmlFor=\"firstName\">First champion:</label>\r\n                <input\r\n                    id='firstName'\r\n                    name='firstName'\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? <p className='formik-error'>{formik.errors.firstName}</p> : null}\r\n                <label htmlFor=\"secondName\">Second champion:</label>\r\n                <input\r\n                    id='secondName'\r\n                    name='secondName'\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.secondName} />\r\n                {formik.touched.secondName && formik.errors.secondName ? <p className='formik-error'>{formik.errors.secondName}</p> : null}\r\n                <button type='submit'>Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function InfoPanel({ names, score, gameOver }) {\r\n\r\n\r\n    return (\r\n        <div className='info-panel'>\r\n            <h1>Score</h1>\r\n            {names.map((name, index) => <h4 key={index}>{name}: {score[index]}</h4>)}\r\n            {gameOver()}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport BattleBoard from './BattleBoard'\r\nimport { culcWinner } from './../helper';\r\nimport Modal from './Modal';\r\nimport InfoPanel from './InfoPanel';\r\n\r\n\r\nexport default function Game() {\r\n    const [modalActive, setModalActive] = useState(true)\r\n    const [names, setNames] = useState(['Player1', 'Player2'])\r\n    const [score, setScore] = useState([0, 0])\r\n    const [board, setBoard] = useState(Array(9).fill(null))\r\n    const [xIsNext, setXIsNext] = useState(true)\r\n    const winner = culcWinner(board)\r\n\r\n    const handleClick = i => {\r\n        const newBord = [...board]\r\n        if (winner || newBord[i]) return\r\n        newBord[i] = xIsNext ? \"X\" : \"O\"\r\n        setBoard(newBord)\r\n        setXIsNext(!xIsNext)\r\n    }\r\n\r\n    const drawChecker = () => {\r\n        const newBord = [...board]\r\n        const isDraw = newBord.every(e => e)\r\n        return isDraw\r\n    }\r\n\r\n    const gameOver = () => {\r\n        if (winner) return <div>\r\n            <h3>Winner is {winner === \"X\"\r\n                ? names[0]\r\n                : names[1]}\r\n            </h3>\r\n            {<button onClick={() => { newGame() }}>New Game</button>}\r\n        </div>\r\n        else if (drawChecker()) return <>\r\n            <h3>There is no winner, try another game</h3>\r\n            <button onClick={() => { newGame() }}>New Game</button>\r\n        </>\r\n    }\r\n\r\n    const newGame = () => {\r\n        setBoard(Array(9).fill(null))\r\n        setXIsNext(true)\r\n        const newScore = [...score]\r\n        if (winner === \"X\") {\r\n            newScore[0] = newScore[0] + 1\r\n        } else if (winner === \"O\") {\r\n            newScore[1] = newScore[1] + 1\r\n        }\r\n        setScore(newScore)\r\n    }\r\n\r\n    return (\r\n        <div className='game'>\r\n            <BattleBoard\r\n                onClick={handleClick}\r\n                squares={board}\r\n            />\r\n            <Modal\r\n                active={modalActive}\r\n                setActive={setModalActive}\r\n                setNames={setNames}\r\n            />\r\n            <InfoPanel\r\n                winner={winner}\r\n                names={names}\r\n                newGame={newGame}\r\n                score={score}\r\n                gameOver={gameOver}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","export function culcWinner(squares) {\r\n    const patterns = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    for (let i = 0; i < patterns.length; i++) {\r\n        const [a, b, c] = patterns[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) return squares[a]\r\n    }\r\n    return null\r\n}","import './App.css';\nimport Game from './Components/Game';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}